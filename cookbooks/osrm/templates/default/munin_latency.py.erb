#!/usr/bin/env python3

import sys, os
import datetime

transportmodes=["<%= @profiles.join('", "') %>"]
logdir="/var/log/apache2/"

starttime = datetime.datetime.now(datetime.timezone.utc) - datetime.timedelta(0,300)

# for munin: advertise which values will be given and how to label them
if len(sys.argv) > 1 and sys.argv[1] == "config":
    print("graph_title Routing latency")
    print("graph_vlabel request time")
    print("graph_args --base 1000 -l 0")
    print("graph_category OSRM")
    print("graph_info average time taken to deliver a route in the last 5 minutes")
    for tm in transportmodes:
        print("{0}_mean.label mean {0}".format(tm))
    for tm in transportmodes:
        print("{0}_median.label median {0}".format(tm))

# output the latency values
else:
    for tm in transportmodes:
        logpath = os.path.join(logdir, "routing-times-{0}.log".format(tm))
        logfile = open(logpath, "rb")
        # each log line looks like this:
        # [01/Jan/2000:00:00:00 +0100] 9063
        #             date             us time for delivering the result
        date_end_char = 27 # fixed format. Position of the bracket ]
        logfile = list(logfile)
        logfile.reverse()
        timelist = list()
        for logline in logfile:
            date = datetime.datetime.strptime(logline[1:date_end_char].decode("utf-8"), "%d/%b/%Y:%H:%M:%S %z")
            time = logline[date_end_char+2:]
            if date < starttime:
                break
            timelist.append(float(time))

        if len(timelist) > 0:
            mean = sum(timelist) / len(timelist) / 1000000.
            timelist.sort()
            median = timelist[int(len(timelist) / 2)] / 1000000.
        else:
            mean = 0.
            median = 0.
        print("{0}_mean.value {1}".format(tm, mean))
        print("{0}_median.value {1}".format(tm, median))
