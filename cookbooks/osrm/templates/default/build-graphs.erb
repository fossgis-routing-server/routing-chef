#!/bin/bash

set -eu

SCRIPTNAME=osrm/$(basename $0)
LOGGING_CMD="logger -i -t $SCRIPTNAME -p daemon.warning --"
LOGGING_ERR="logger -i -t $SCRIPTNAME -p daemon.err --"
LOGGING_CRIT="logger -i -t $SCRIPTNAME -p daemon.crit --"
LOGGING_INFO="logger -i -t $SCRIPTNAME -p daemon.info --"
LOGGING_NOTICE="logger -i -t $SCRIPTNAME -p daemon.notice --"

for PROFILE in <%= @profilelist %>
do

    cd $(dirname <%= @osmdata %>)
    $LOGGING_INFO starting pyosmium-up-to-date -v <%= @osmdata %>
    pyosmium-up-to-date \
      -s 10000 -v <%= @osmdata %> | $LOGGING_INFO
    $LOGGING_INFO finished updating planet

    if [ -f <%= @basedir %>/extract/$PROFILE.geojson ]
    then
        osmium extract \
            -p <%= @basedir %>/extract/$PROFILE.geojson osmdata.pbf -O \
            -o $PROFILE.pbf | $LOGGING_INFO
    else
        ln -f osmdata.pbf $PROFILE.pbf | $LOGGING_ERR
    fi

    cd <%= @basedir %>/cbf-routing-profiles/
    $LOGGING_INFO starting compile_profiles
    ./compile_profiles.sh profile-${PROFILE}.conf 2>&1 | $LOGGING_INFO
    osmium fileinfo  <%= @basedir %>/build/$PROFILE.pbf \
        -g header.option.osmosis_replication_timestamp \
        > <%= @basedir %>/build/${PROFILE}.data_timestamp | $LOGGING_ERR
    # fix strange permission of fileIndex
    chmod 644  <%= @basedir %>/build/${PROFILE}.osrm.fileIndex
    rm -f <%= @basedir %>/data/${PROFILE}*  2>&1 | $LOGGING_ERR
    <% if  @hostmapping[@myhost] -%>
    # stop osrm server before copying if local host is serving the current profile
    case $PROFILE in
        <% @hostmapping[@myhost].each do |profile| -%>
        <%= profile %>)
            sudo systemctl stop osrm-routed-<%= profile %>.service 2>&1 || \
            echo "osrm-routed-<%= profile %>.service was not started" | $LOGGING_INFO
            ;;
        <% end -%>
    esac
    <% end -%>
    cp -l <%= @basedir %>/build/${PROFILE}* <%= @basedir %>/data/ 2>&1 | $LOGGING_ERR
    <% if  @hostmapping[@myhost] -%>
    # start server again after copying if local host is serving the current profile
    case $PROFILE in
        <% @hostmapping[@myhost].each do |profile| -%>
        <%= profile %>)
            sudo systemctl start osrm-routed-<%= profile %>.service 2>&1 | $LOGGING_INFO
            ;;
        <% end -%>
    esac
    <% end -%>


    # copy graph to serving machine
    DESTINATION_HOST="undefined"
    case $PROFILE in
    <% for host in @hostmapping.keys do -%>
        <%= @hostmapping[host].join("|") %>)
            DESTINATION_HOST=<%= host %>.openstreetmap.de
            ;;
    <% end -%>
    esac
    COUNT=1
    if [ "$DESTINATION_HOST" != "<%= @myhost %>.openstreetmap.de" ]
    then
        while [ "$COUNT" -le 3 ]
        do
            ssh osrmdata@$DESTINATION_HOST "rm -f <%= @basedir %>/build/${PROFILE}.copying_finished"
            rsync -W --exclude *.pbf \
                <%= @basedir %>/build/${PROFILE}.[cdo]* \
                osrmdata@$DESTINATION_HOST:<%= @basedir %>/build/ 2>&1 | $LOGGING_ERR && break
            COUNT=$((COUNT+1))
        done
        # create a timestamp file on the destination machine
        date -Is > <%= @basedir %>/build/${PROFILE}.copying_finished
        rsync -W <%= @basedir %>/build/${PROFILE}.copying_finished osrmdata@$DESTINATION_HOST:<%= @basedir %>/build/ 2>&1 | $LOGGING_ERR
    fi

    if [ "$COUNT" -gt 1 ]
    then
        if [ "$COUNT" -gt 3 ]
        then
            $LOGGING_CMD "Failed to copy the graph of profile $PROFILE to $DESTINATION_HOST:<%= @basedir %>/build/"
            exit 1
        else
            $LOGGING_NOTICE "Needed $COUNT attempts to copy the graph of profile $PROFILE to $DESTINATION_HOST:<%= @basedir %>/build/"
        fi
    fi

    $LOGGING_INFO "copying graph to $DESTINATION_HOST finished"

done


